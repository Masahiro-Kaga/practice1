250,251

事前説明、大したことないかな。


252 前半

まず、このウェブアプリがどのように動くか、どんなものか把握してなにしたらいいかイメージさせる必要あり。
完成バージョンの挙動は、253の17:20あたりで確認。

事前に必要なモジュール（redux,redux-toolkitも含め）がある。jsonにすでにredux,redux-toolkit以外のディペンデンシーは載ってるので、npm installで必要モジュールインストール。そしたらWebページがレンダリングできるようになる。
その後、redux,redux-toolkitも手動でインストール


252 中盤（253にかけて、かなり長丁場：今までのおさらい）

順番をしっかり決めて、進める。
us-slice関連から

１ ui-slice.js作成、Cartコンポーネントのトグルを作るので、それに応じたつくりにする。
２ store/index.jsでstoreを作ってexportする。
３ src/index.jsにて、storeを全コンポーネントに供給すべく、Providerする（思い出して！）。
４ CartButton.jsにて、クリックでtoggle functionを発動させる。
５ App.jsにて、cartIsVisibleを呼んで、トグル機能を作る。
完了


252 後半ー13:35
次に、cart-slice（難しいし、コード長い）
１ cart-slice.jsを作成（多少複雑）、findとfilter functionを使います。
    initialState作成。
    addItemToCart(state,action),removeItemFrom(state,action)の二つの箱（reducer）作成。
        addItemToCart
            新しいアイテムが増えるからpayload用意
            アイテムの種類に関わらず、合計値を＋１（右上カートの中の数を増やすもの）
            ifにて、そのアイテムオブジェクト（item）がすでに配列の中に存在するかどうかの条件分岐。
            true（findで見つかったオブジェクトを返す。undefine?ならfalse）:配列（items）の中にオブジェクト、そしてそのオブジェクト（item）には、値段、数、合計額、名前。それをプッシュ。
            false:そのitemの数と合計額を更新する。
        removeItemFrom
            アイテム増えないけど、どのアイテムの数量を削除するのかわからないといけないから、アイテムのidをペイロードに。
            他のアイテム含めの総合計を減らす。
            条件分岐、現在アイテムが１つかどうかで、全部消すかそのアイテムの個数一個だけ引くか。
            filter、かしこい使い方して一発で削除してる。他のファンクションだとズバリ削除できるものがないっぽい。
            https://www.fenet.jp/dotnet/column/language/3439/
            https://qiita.com/Sekky0905/items/598b47fea2106b8c140e
    そのあと、スライスから二つのものをエクスポート。


253

続き。3:30までは引き続きcart-slice.
２ storeのindex.jsにcartSlice.js関連をインポート。
※ ３の説明として：Products以下コンポーネントは、途中から追加や削除するものではなく、もともとある商品（の一覧）なので、勘違いしないように。
３ Shop/Products.jsとProductItem.jsを整理、まずは前者。もともと暫定で１つあるダミー品目をさらに、配列処理するために二つコンポーネント前に作る。idやらpriceはアプリの画面見て必要なものを用意してみる。mapファンクションを使うので、keyが必要であることに注意。
４ 6:50からProductItem.js（少し難）。ここでボタンをクリックしてDispatchするから、ここにDispatch系の機能全て搭載。
５ 品目の各情報（値段やら品名やら）はProductコンポーネントから持ってくる。ということは、props。そしてDecomposeして必要な変数を設定。そしてdispatchを組んで必要な変数（Payloadとして、だからスライス参考）をブッ込む。変数のショートカットの書き方もいい加減覚えて。

９:20からCart関連。

６ CardButtonで、全部のアイテム（種類に関わらず）の数を表示させるため、useSelectorを搭載して数を表示させる。
７ Cart.jsは現時点でダミー。そのため、cartSliceから持ってくる。そしてmapを使って展開して表示する。そうすると、２つの製品をそれぞれいくつか選択後、右上のボタンを押せば、真ん中にカートが現れる。CartItemをmapで展開するには、直接、key attributeを持っていないとエラーが出る。itemオブジェクトのidだけではダメ。
※ 14:00 Maxのミスも勉強になる。
８ CartItem.js。すでに真ん中に表示されたカートの中のプラスとマイナスのボタンを動作させる。いくつかの作り・留意事項はProductItem.jsとちょっと同じ。addの他にremoveも必要となる。

完成バージョンの挙動は、17:20あたりで確認。
なお、カートのマイナスボタンを押すと、個数は減るが合計額は減らないのは、マックスのコードをそのまま写しても同じ挙動。（cart-sliceのどっちのreducerのelse以降に、existingItem.totalPrice = existingItem.price * existingItem.quantity　を入れてやればいい。）


